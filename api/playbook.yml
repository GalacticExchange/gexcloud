---
- hosts: all
  sudo: true
  vars_files:
    - ../vars_common/{{machine}}.yml
    - vars/{{machine}}.yml

  tasks:

# base
    - hostname: name={{hostname}}

# eth

 #   - name: set networking eth1
  #    template: src="files/interfaces/eth1.cfg.j2" dest="/etc/network/interfaces.d/eth1.cfg"
   # - name: start interfaced
    #  shell: ifup eth1

    #- name: set networking eth2
     # template: src="files/interfaces/eth2.cfg.j2" dest="/etc/network/interfaces.d/eth2.cfg"
    #- name: start interfaced
     # shell: ifup eth2

    #- name: set default route
     # shell : ip route replace default via {{ _gateway }}



# hosts
    - name: edit /etc/hosts
      include: ../roles/dns/tasks/add_hosts.yml



### swap
    - name: swap
      vars:
        size: "4G"
        filename: "/swapfile"
      include: ../roles/swap/tasks/main.yml
      ignore_errors: yes




### ufw
    - name: remove ufw
      apt: pkg=ufw state=absent

    - apt: update_cache=yes

    #- name: install fish
    #  apt: pkg=fish state=latest

    - name: install vim
      apt: pkg=vim state=latest

    - name: install htop
      apt: pkg=htop state=latest




    - apt: pkg=openvpn state=latest

### sshpass
    - apt: pkg=sshpass state=latest


### ssh

    - name: copy ssh_config
      template: src=files/ssh/ssh_config.j2 dest=/etc/ssh/ssh_config owner=root group=root mode=0644

    - name: copy sshd_config
      template: src=files/ssh/sshd_config.j2 dest=/etc/ssh/sshd_config owner=root group=root mode=0644


    - name: hosts allow/deny
      include: ../roles/hosts/tasks/main.yml




    - name: restart ssh
      shell: sudo service ssh restart



# user for ruby

    - name: create group dev
      group: name={{ruby_group}} state=present

    - name: create user
      user: name={{ruby_user}} shell=/bin/bash groups="sudo,{{ruby_group}}" append=yes

    - name: Set password to user
      shell: echo {{ruby_user}}:{{ruby_user_password}} | sudo chpasswd
      no_log: True




### ssh key for uadmin
    - set_fact:
        user: "uadmin"

    - name: ssh key for uadmin
      include: add_ssh_key.yml


### mysql
- hosts: all
  sudo: true
  vars_files:
    - vars/{{machine}}.yml
  roles:
     - { role: ../roles/mysql }


### ruby with RVM
- hosts: all
  sudo: true
  vars_files:
    - vars/{{machine}}.yml
  tasks:
    - include: ../roles/ruby/tasks/main.yml


# TODO: install gems // 2016-nov-02
# backup, whenever

# mysql lib
- hosts: all
  sudo: true
  tasks:
    - command: sudo apt-get install libmysqlclient-dev


# mysql gem
- hosts: all
  sudo: true
  sudo_user: "{{ruby_user}}"
  vars_files:
    - ../vars_common/{{machine}}.yml
    - vars/{{machine}}.yml
  tasks:
    - name: copy script to install mysql gem
      copy: src=../roles/ruby/files/mysql_gem.sh dest=/tmp/mysql_gem.sh owner={{ruby_user}} group={{ruby_group}} mode=775

    - name: install mysql gem
      command: bash /tmp/mysql_gem.sh

# ruby gems
- hosts: all
  sudo: true
  sudo_user: "{{ruby_user}}"
  vars_files:
    - ../vars_common/{{machine}}.yml
    - vars/{{machine}}.yml
  tasks:
    - name: install aws-sdk and fog
      shell: >
        gem install aws-sdk &&
        gem install fog &&
        gem install net-ssh &&
        gem install net-scp &&
        gem install chef



### passenger with nginx

- hosts: all
  sudo: yes
  vars_files:
    - vars/{{machine}}.yml

  roles:
     - { role: ../roles/nginx-passenger }



### nginx config
- hosts: all
  sudo: true
  vars_files:
    - vars/{{machine}}.yml
  tasks:
    - template: src=files/nginx/nginx.conf.j2 dest=/etc/nginx/nginx.conf owner={{ruby_user}} group={{ruby_group}} mode=0775



###
- hosts: all
  sudo: true
  vars_files:
    - vars/{{machine}}.yml
  tasks:
    - file: path=/var/www/apps state=directory mode=0775 owner={{ruby_user}} group={{ruby_group}}
    - file: path=/var/www/logs state=directory mode=0775 owner={{ruby_user}} group={{ruby_group}}




### php for nginx
- hosts: all
  sudo : true
  vars_files:
    - vars/{{machine}}.yml
  roles:
     - { role: ../roles/nginx-php }




### nginx default server
- hosts: all
  sudo : true
  vars_files:
    - vars/{{machine}}.yml
  tasks:
    - template: src=files/nginx_sites/default.conf.j2 dest=/etc/nginx/sites-available/default.conf owner={{ruby_user}} group={{ruby_group}} mode=0775
    - shell: ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf
      ignore_errors: yes

    - name: restart nginx
      shell: sudo service nginx restart




### redis

- hosts: all
  sudo : true
  vars_files:
    - vars/{{machine}}.yml
  roles:
     - { role: ../roles/redis }


# redis config
- hosts: all
  sudo : true
  vars_files:
    - vars/{{machine}}.yml
  tasks:
    - name: copy Redis config file
      template: src=files/redis/redis.conf.erb dest=/etc/redis/redis.conf owner=root group=root mode=0775

    - name: systemd service for Redis
      copy: src=files/redis/redis-server.service dest=/lib/systemd/system/redis-server.service owner=root group=root mode=0775

    - name: restart redis
      #include: ../roles/redis/tasks/restart.yml
      shell: >
        systemctl daemon-reload;
        service redis-server restart;


### phpmyadmin
- hosts: all
  sudo: true
  vars_files:
    - vars/{{machine}}.yml
  roles:
     - { role: ../roles/nginx-phpmyadmin }



### phpredisadmin

- hosts: all
  sudo: true
  vars_files:
    - vars/{{machine}}.yml
  roles:
    - { role: ../roles/nginx-phpredisadmin }

# config phpredisadmin
- hosts: all
  sudo: true
  vars_files:
    - vars/{{machine}}.yml
  tasks:
    - name: copy config file
      template: src=files/phpredisadmin/config.inc.php.j2 dest=/var/www/html/phpredisadmin/includes/config.inc.php owner={{ruby_user}} group={{ruby_group}} mode=0775

    - name: fix permissions
      shell: chown {{ruby_user}}:{{ruby_group}} -R /var/www/html/phpredisadmin


    - name: restart nginx
      shell: service nginx restart




### god
- hosts: all
  sudo : true
  vars_files:
    - vars/{{machine}}.yml
  vars:
    god_log_file: /var/www/logs/god.log
    user: "{{ruby_user}}"
    group: "{{ruby_group}}"
    use_rvm: "1"
  roles:
     - { role: ../roles/god }


### god config
- hosts: all
  sudo : true
  vars_files:
    - vars/{{machine}}.yml
  tasks:
    - name: god master.conf
      template: src=files/god/master.conf.j2 dest=/opt/god/master.conf owner={{ruby_user}} group={{ruby_group}} mode=0775

    - name: god stop
      shell: sudo service god stop

    - name: god start
      shell: sudo service god start





### java
- hosts: all
  sudo : true
  vars_files:
    - vars/{{machine}}.yml
  roles:
     - { role: ../roles/java }



### elasticsearch
- hosts: all
  sudo: true
  vars_files:
    - vars/{{machine}}.yml
  roles:
     - { role: ../roles/elasticsearch }


# elasticsearch config
- hosts: all
  sudo : true
  vars_files:
    - vars/{{machine}}.yml
  tasks:
    - template: src=files/elasticsearch/elasticsearch.yml.j2 dest=/etc/elasticsearch/elasticsearch.yml owner=root group=elasticsearch mode=0775

    - name: restart ES
      shell: sudo systemctl start elasticsearch

#    - name: restart ES
#      shell: sudo service elasticsearch restart


    - name: nfs-common
      shell: sudo apt-get install nfs-common


### NFS for ansible
#    - name: dir /mnt/nfs/files
#      file: path=/mnt/nfs/files state=directory mode=0777
#      ignore_errors: yes


#    - name: automount files
#      lineinfile: >
#        dest=/etc/fstab
#        regexp=" /mnt/nfs/files.*"
#        line="{{files_host}}:/var/nfs    /mnt/nfs/files  nfs auto"
#        state=present

#    - name: mount now
#      shell: sudo mount -a




### ansible scripts
    - name: dir /var/www/ansible
      file: path=/var/www/ansible state=directory mode=0775 owner={{ruby_user}} group={{ruby_group}}
      ignore_errors: yes

    - name: dir /var/www/data
      file: path=/var/www/data state=directory mode=0775 owner={{ruby_user}} group={{ruby_group}}
      ignore_errors: yes

    - name: dir /var/www/data/clusters
      file: path=/var/www/data/clusters state=directory mode=0775 owner={{ruby_user}} group={{ruby_group}}
      ignore_errors: yes

    - name: git for /var/www/ansible
      shell: cd /var/www/ansible; git init; git remote add origin {{ansible_git_repo}};

    - name: dir /var/www/vagrant
      file: path=/var/www/vagrant state=directory mode=0775 owner={{ruby_user}} group={{ruby_group}}
      ignore_errors: yes

    - name: git for /var/www/vagrant
      shell: cd /var/www/vagrant; git init; git remote add origin {{vagrant_git_repo}};



### ansible
    - include: ../roles/ansible/tasks/install_1_9_4.yml



# ansible config
    - name: copy ansible.cfg
      copy: src=files/ansible/ansible.cfg dest=/etc/ansible/ansible.cfg owner=root group=root mode=775



### libs
    - name: install imagemagick
      apt: pkg=imagemagick state=latest




### apps on nginx
- hosts: all
  sudo: yes
  vars_files:
    - vars/{{machine}}.yml
  tasks:
    - include_vars: vars/{{machine}}.yml

    - name: app api
      vars:
        app_name: "{{ app_api_name }}"
        app_env: "{{ app_api_env }}"
        app_domain: "{{api_domain}} {{hub_domain}} {{api_ip}}"
        app_ip: "{{ api_ip }}"
        app_port: "{{ api_port }}"
        ruby_user: "{{ ruby_user }}"

      include: ../roles/nginx-app-rails/tasks/main.yml


# fix permissions
    - command: sudo chown {{ruby_user}}:{{ruby_group}} -R {{item}}
      with_items:
        - /var/www/apps
        - /var/www/html
        - /var/www/logs
        - /var/www/ansible
        - /var/www/data


    - command: sudo chmod g+s -R {{item}}
      with_items:
        - /var/www/apps
        - /var/www/logs
        - /var/www/html
        - /var/www/data
        - /var/www/ansible



# restart Nginx
    - name: Restart nginx
      action: service name=nginx state=restarted



## import db

    - name: copy db dump file - 1
      copy: src=files/db/init_gex.sql.gz dest=/var/www/temp/init_gex.sql.gz owner=root group=root mode=775

    - name: copy db dump file - 2
      copy: src=files/db/init_gex_logs.sql.gz dest=/var/www/temp/init_gex_logs.sql.gz owner=root group=root mode=775


    # this needs to be done to update the DB
    #START_DB

    - name: import db
      shell: >
        cd /var/www/temp/ && rm -f init_gex.sql && gunzip init_gex.sql.gz;
        mysql -u root -p{{mysql_root_password}} gex < /var/www/temp/init_gex.sql

    # this needs to be done to update the DB
    #END_DB


    - name: import db logs
      shell: >
        cd /var/www/temp/ && rm -f init_gex_logs.sql && gunzip init_gex_logs.sql.gz;
        mysql -u root -p{{mysql_root_password}} gex_logs < /var/www/temp/init_gex_logs.sql



### nodejs, bower
    - name: repo for nodejs
      shell: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -

    - name: install nodejs
      shell: apt-get install -y nodejs

    - name: bower
      shell: >
        npm install -g bower;
        npm install -g bower-npm-resolver;



### sensu-client
    - include: sensu_client_install.yml


### sensu - check dns
    - include: sensu_monitoring.yml

### slack client - ansible logs
    - name: make plugin directory
      command: sudo mkdir -p /usr/share/ansible_plugins/callback_plugins/

    - name: install slackclient
      command: sudo pip install slackclient
   
    - copy: src=slack/slack-logger.py dest=/usr/share/ansible_plugins/callback_plugins/slack-logger.py owner=root group=root mode=775



### /var/www/tests

    - name: dir /var/www/tests
      file: path=/var/www/tests state=directory mode=0775
      ignore_errors: yes

    - command: sudo chown {{ruby_user}}:{{ruby_group}} -R /var/www/tests

    - name: git for /var/www/tests
      shell: cd /var/www/tests; git init; git remote add origin {{tests_git_repo}};

    - command: sudo chown {{ruby_user}}:{{ruby_group}} -R /var/www/tests



### chef

    - name: dir /var/www/chef
      file: path=/var/www/chef state=directory mode=0775
      ignore_errors: yes

    - command: sudo chown {{ruby_user}}:{{ruby_group}} -R /var/www/chef

    - name: git for /var/www/chef
      shell: cd /var/www/chef; git init; git remote add origin {{chef_git_repo}};

    - command: sudo chown {{ruby_user}}:{{ruby_group}} -R /var/www/chef

    - name: install chefDK
      shell: >
       cd /tmp; wget https://packages.chef.io/stable/ubuntu/12.04/chefdk_0.14.25-1_amd64.deb;
       dpkg -i chefdk_0.14.25-1_amd64.deb;



- hosts: all
  sudo: false
  tasks:
    - shell: >
       chef gem install chef-provisioning chef-provisioning-docker docker docker-api;
       chef gem install bundler;
       chef gem install knife-zero;


# gems
#      gem install rspec;

# docker
       #groupadd docker;
       #usermod -aG docker vagrant




### dns
- hosts: all
  sudo: true
  tasks:
    - include_vars: "../roles/dns/defaults/main.yml"
    - set_fact:
        dns_nameservers:
          - "{{dns_server}}"
          - '8.8.8.8'
    - name: change DNS servers
      include: ../roles/dns/tasks/main.yml


    - name: change DNS servers - hard
      include: ../roles/dns/tasks/set_dns_resolv.yml


# nfs

    - name: nfs-kernel-server
      shell: sudo apt-get install -y nfs-kernel-server

    - name: nfs client components
      shell: sudo apt-get install -y nfs-common


    - name: dir /var/nfs
      file: path=/var/nfs state=directory mode=0777 owner=vagrant group=nogroup


    - name: dir /var/www/ansibledata
      file: path=/var/www/ansibledata state=directory mode=0777 owner=vagrant group=nogroup

    - name: dir /var/www/ansibledata/vars
      file: path=/var/www/ansibledata/vars state=directory mode=0777 owner=vagrant group=nogroup


    # config nfs
    - name: edit /etc/exports
      lineinfile: >
        dest=/etc/exports regexp="/var/www.*"
        line="/var/www/ansible *(ro,all_squash,sync,no_subtree_check)"
        state=present

    # config nfs
    - name: edit /etc/exports
      lineinfile: >
        dest=/etc/exports regexp="/var/www.*"
        line="/var/www/vagrant *(ro,all_squash,sync,no_subtree_check)"
        state=present


    # config nfs
    - name: edit /etc/exports
      lineinfile: >
        dest=/etc/exports regexp="/var/www/ansibledata.*"
        line="/var/www/ansibledata *(rw,all_squash,sync,no_subtree_check)"
        state=present



    - name: exportfs
      shell: sudo exportfs -a


    - name: restart nfs
      shell: sudo service nfs-kernel-server restart

    - name: disable dbus
      shell:
        sudo systemctl stop accounts-daemon &&
        sudo systemctl disable accounts-daemon


    - name: fix redis 1
      lineinfile: >
         dest=/etc/rc.local
         insertbefore="^exit 0"
         line="echo never > /sys/kernel/mm/transparent_hugepage/enabled"
         state=present

    - name: fix redis 2
      lineinfile: >
         dest=/etc/rc.local
         insertbefore="^exit 0"
         line="RestartSec=5"
         state=present


    - name: fix redis 3
      lineinfile: >
         dest=/etc/sysctl.conf
         line="vm.overcommit_memory = 1"
         state=present

    - name: fix redis 4
      lineinfile: >
         dest=/etc/systemd/system/multi-user.target.wants/redis-server.service
         insertbefore="^User=redis"
         line="vm.overcommit_memory = 1"
         state=present

    - name: rotate logs for Rails
      shell: >
         echo '/var/www/apps/apihub/shared/log/*.log {' > /etc/logrotate.conf;
         echo 'daily' > /etc/logrotate.conf;
         echo 'missingok' > /etc/logrotate.conf;
         echo 'rotate 7' > /etc/logrotate.conf;
         echo 'compress' > /etc/logrotate.conf;
         echo 'delaycompress' > /etc/logrotate.conf;
         echo 'notifyempty' > /etc/logrotate.conf;
         echo 'copytruncate' > /etc/logrotate.conf;
         echo '}' > /etc/logrotate.conf;


# deploy app
- include: deploy.yml

# init app
- include: app_init.yml
